name: Cloud-DevOps-CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: flask
  ECR_REPOSITORY: flask
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  provision_infra:
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    environment:
      name: Production
    outputs:
      INSTANCE_IP: ${{ steps.ip.outputs.INSTANCE_IP }}
    steps:
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.REGION }}

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/infra

      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform/infra

      - name: Terraform Apply
        run: terraform apply --auto-approve
        working-directory: terraform/infra

      - name: Fetch Instance IP
        id: ip
        run: |
          INSTANCE_IP=$(terraform output -raw instance_ip)
          echo "INSTANCE_IP=${INSTANCE_IP}" >> $GITHUB_OUTPUT
        working-directory: terraform/infra

  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} .
        working-directory: app

      - name: Test
        run: |
          docker run ${{ env.IMAGE_NAME }}:latest python -m unittest discover -s tests -p 'test_*.py'
        working-directory: app

      - name: Lint with pylint
        run: |
          docker run ${{ env.IMAGE_NAME }}:latest pylint main.py
        working-directory: app

  release:
    name: Release
    needs: [provision_infra, build_and_test]
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build, tag, and push docker image to Amazon ECR
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: "${{ secrets.ACC_ID }}.dkr.ecr.${{ secrets.REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [provision_infra, release]
    environment:
      name: Production
    steps:
      - name: SSH and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.provision_infra.outputs.INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            export AWS_SESSION_TOKEN="${{ secrets.AWS_SESSION_TOKEN }}"
            export AWS_DEFAULT_REGION="${{ secrets.REGION }}"
            aws ecr get-login-password --region "${{ secrets.REGION }}" | docker login --username AWS --password-stdin "${{ secrets.ACC_ID }}.dkr.ecr.${{ secrets.REGION }}.amazonaws.com"
            docker pull "${{ secrets.ACC_ID }}.dkr.ecr.${{ secrets.REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
            docker run -d -p 5000:5000 "${{ secrets.ACC_ID }}.dkr.ecr.${{ secrets.REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
